from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils import executor, callback_data

from Seminar_10.keyboards.inline.choice_buttons import choice
from config import *
from aiogram.dispatcher.filters import Command, Text
from aiogram.types import Message, CallbackQuery
import random
bot = Bot(BOT_TOKEN)
dp = Dispatcher(bot)
@dp.message_handler(Command("start"))
async def choice_sign(message: Message):
    await message.answer(text="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–¥–∞—Å—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–µ–±–µ.üòâ\n"
                              "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–û—Ç–≤–µ—Ç'!\n"
                        "–ò–ª–∏ –Ω–∞–∂–º–∏ '–ú–æ—Ç–∏–≤–∞—Ü–∏—è', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞—Ä—è–¥ –ø–æ–∑–∏—Ç–∏–≤–∞!",
                         reply_markup=choice)


@dp.callback_query_handler(text='start')
async def make_answer(call: CallbackQuery):
    lst_answ = ["–¥–∞", "–¥—É—Ö–∏ –≥–æ–≤–æ—Ä—è—Ç –Ω–µ—Ç", "–≤–æ–∑–º–æ–∂–Ω–æ", "—Å–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ", "–Ω–µ —Å–µ–π—á–∞—Å", "–Ω–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å", "–µ—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è", "–æ—á–µ–Ω—å –≤–µ—Ä–æ—è—Ç–Ω–æ", "—à–∞–Ω—Å–æ–≤ –Ω–µ–º–Ω–æ–≥–æ", "—Ç–æ—á–Ω–æ –Ω–µ—Ç", "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ"]
    await call.answer(random.choice(lst_answ), show_alert=True)

@dp.callback_query_handler(text='mot')
async def make_answer(call: CallbackQuery):
    lst_answ = ["–¢—ã –º–æ–ª–æ–¥–µ—Ü!", "–í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ!", "–£ —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è!", "–õ—É—á—à–∏–π!", "–ù–æ—Ä–º–∞–ª—å–Ω–æ –¥–µ–ª–∞–π, –Ω–æ—Ä–º–∞–ª—å–Ω–æ –±—É–¥–µ—Ç!", "–£ —Ç–µ–±—è –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π —É–º!", "–¢—ã –ø–æ—Ç—Ä—è—Å–∞—é—â–∞—è –ª–∏—á–Ω–æ—Å—Ç—å!", "–ë—É–¥—å —Å–æ–±–æ–π!", "–£ —Ç–µ–±—è –∫–ª–∞—Å—Å–Ω—ã–µ —à—É—Ç–∫–∏!"]
    await call.answer(random.choice(lst_answ), show_alert=True)


executor.start_polling(dp)